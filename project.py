# -*- coding: utf-8 -*-
"""project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PGKNdKKzCq30drL67v-yVBEeKWCxnhPt
"""

#pip install rarfile

"""Extracts the files"""

from google.colab import drive
drive.mount('/content/drive')
import zipfile
import os
import rarfile
import pandas as pd

data=rarfile.RarFile("/content/drive/MyDrive/PROJECT/lfw.rar",'r')
data.extractall('/tmp')
data.close()

len(os.listdir('/tmp/lfw/lfw'))

df = pd.DataFrame(data)

df.head()

df.describe()

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image



img = Image.open('/tmp/lfw/lfw/AJ_Lamas/AJ_Lamas_0001.jpg')
img_array = np.array(img)

plt.imshow(img_array)
plt.show()

import os
import random
from shutil import copyfile

lfw_dir = (r"/tmp/lfw/lfw")
lfw_names_file = os.path.join(lfw_dir, '/content/drive/MyDrive/PROJECT/lfw-names.txt')

LFWs=(r"/tmp/LFWs/")


# Load the metadata file
with open(lfw_names_file, 'r') as f:
    lines = f.readlines()

# Create a dictionary of individuals and their image counts
counts = {}
for line in lines:
    name, count = line.strip().split('\t')
    counts[name] = int(count)

# Create a list of individuals with at least 10 images
people = [name for name in counts.keys() if counts[name] >= 10]

# Create the subset directory if it doesn't exist
if not os.path.exists(LFWs):
    os.makedirs(LFWs)


# Copy 10 random images from each individual to the subset directory
amount=0

for name in people:
    img_dir = os.path.join(lfw_dir, name)
    img_files = os.listdir(img_dir)
    sub_dir=os.path.join(LFWs,name)
    os.makedirs(sub_dir,exist_ok=True)
    for i in range(0,counts[name]):
       src_file = os.path.join(img_dir, img_files[i])
       dst_file = os.path.join(sub_dir, f'{name}_{i}.jpg')
       copyfile(src_file, dst_file)
       amount+=1



print(len(os.listdir(lfw_dir))) #number of folder in main dataset
print(len(os.listdir(LFWs)))  #number of folder in sub dataset

#this is number of images for all folders in subset
print(amount)

#this is for installing LFWs data set to desktop
#pip install pyautogui
#!zip -r /tmp/file.zip /tmp/LFWs
#ı changed LFWs from folder to zip


from google.colab import files
files.download("/tmp/file.zip")
#with this code, ı can install file.zip from colab to my computer

with rarfile.RarFile("/content/drive/MyDrive/PROJECT/LFWss.rar", 'r') as rar:
  rar.extractall("/tmp")
  print('Done')

with rarfile.RarFile("/content/drive/MyDrive/PROJECT/filteredImages/LFWs_f1.rar", 'r') as rar:
  rar.extractall("/tmp")
  print('Done')

with rarfile.RarFile("/content/drive/MyDrive/PROJECT/filteredImages/LFWs_f2.rar", 'r') as rar:
  rar.extractall("/tmp")
  print('Done')

with rarfile.RarFile("/content/drive/MyDrive/PROJECT/filteredImages/LFWs_f3.rar", 'r') as rar:
  rar.extractall("/tmp")
  print('Done')

print(f"Pretty 1 has {len(os.listdir('/tmp/LFWs_f1'))} many folder")
print(f"Silly Face 2 has {len(os.listdir('/tmp/LFWs_f2'))} many folder")
print(f"Kitten 3 has {len(os.listdir('/tmp/LFWs_f3'))} many folder")

img1 = Image.open('/tmp/LFWss/Abdullah_Gul/Abdullah_Gul_0.jpg')
img_array = np.array(img1)
plt.imshow(img_array)
plt.show()

img4 = Image.open('/tmp/LFWs_f1/Abdullah_Gul/Abdullah_Gul_0.jpg')
img_array4 = np.array(img4)
plt.imshow(img_array4)
plt.show()

img2 = Image.open('/tmp/LFWs_f2/Jennifer_Lopez/Jennifer_Lopez_10.jpg')
img_array2 = np.array(img2)
plt.imshow(img_array2)
plt.show()


img3 = Image.open('/tmp/LFWs_f3/Paul_Bremer/Paul_Bremer_13.jpg')
img_array3 = np.array(img3)
plt.imshow(img_array3)
plt.show()

amountF0=0
folderpath0=r"/tmp/lfw/lfw"
for name in os.listdir(folderpath0):
    img_dir0 = os.path.join(folderpath0, name)
    amountF0+=len(os.listdir(img_dir0))

amountF1=0
folderpath1=r"/tmp/LFWs_f1"
for name in os.listdir(folderpath1):
    img_dir1 = os.path.join(folderpath1, name)
    amountF1+=len(os.listdir(img_dir1))

amountF2=0
folderpath2=r"/tmp/LFWs_f2"
for name in os.listdir(folderpath2):
    img_dir2 = os.path.join(folderpath2, name)
    amountF2+=len(os.listdir(img_dir2))

amountF3=0
folderpath3=r"/tmp/LFWs_f3"
for name in os.listdir(folderpath3):
    img_dir3 = os.path.join(folderpath3, name)
    amountF3+=len(os.listdir(img_dir3))


print(amountF0)
print(amountF1)
print(amountF2)
print(amountF3)
total=amountF1+amountF2+amountF3
print("total",total)

#pip install deepface

#!git clone https://github.com/serengil/deepface.git

#cd deepface

#pip install -e .

from deepface import DeepFace

import matplotlib.pyplot as plt
import cv2

img3_path="/tmp/LFWs_f3/Paul_Bremer/Paul_Bremer_13.jpg"

print(DeepFace.verify(img3_path,img3_path,))

import pandas as pd
def verify(im1,im2,mn):

  img1=cv2.imread(im1)
  img2=cv2.imread(im2)
  #deepface is not RGB, it is reverse of it
  #plt.imshow(img1[:, :, ::-1])
  #plt.show()
  #plt.imshow(img2[:, :, ::-1])
  #plt.show()
  result=DeepFace.verify(im1,im2,model_name=f"{mn}",enforce_detection=False)
  values_list = list(result.values())
  return values_list

"""VGG-CASE1"""

import os
import pandas as pd
import csv
folderpath="/tmp/LFWss"
df = pd.DataFrame(columns=['Prediction', 'Distance',"Names"])
for name in os.listdir(folderpath):
  imgfolder=os.path.join(folderpath,name)
  img_files = os.listdir(imgfolder)
  for i in range(0,(len(os.listdir(imgfolder))-1)):
      im1=os.path.join(imgfolder,f"{name}_{0}.jpg")
      im2=os.path.join(imgfolder,f"{name}_{i+1}.jpg")
      result=verify(im1,im2,"VGG-Face")
      verification=result[0]
      distance=result[1]
      names=f"{name}_{i+1}"
      data = {'Prediction': verification, 'Distance': distance,"Names":names}
      df = df.append(data, ignore_index=True)

df.to_excel('/content/drive/MyDrive/case/case1_vgg.xlsx', index=False)

"""ARGFACE--CASE1"""



import os
import pandas as pd
import csv
folderpath="/tmp/LFWss"
df = pd.DataFrame(columns=['Prediction', 'Distance',"Names"])
for name in os.listdir(folderpath):
  imgfolder=os.path.join(folderpath,name)
  img_files = os.listdir(imgfolder)
  for i in range(0,(len(os.listdir(imgfolder))-1)):
      im1=os.path.join(imgfolder,f"{name}_{0}.jpg")
      im2=os.path.join(imgfolder,f"{name}_{i+1}.jpg")
      result=verify(im1,im2,"ArcFace")
      verification=result[0]
      distance=result[1]
      names=f"{name}_{i+1}"
      data = {'Prediction': verification, 'Distance': distance,"Names":names}
      df = df.append(data, ignore_index=True)

df.to_excel('/content/drive/MyDrive/case/case1_arg.xlsx', index=False)

import os
import pandas as pd
import csv
folderpath="/tmp/LFWss"
df = pd.DataFrame(columns=['Prediction', 'Distance',"Names"])
for name in os.listdir(folderpath):
  imgfolder=os.path.join(folderpath,name)
  img_files = os.listdir(imgfolder)
  for i in range(0,(len(os.listdir(imgfolder))-1)):
      im1=os.path.join(imgfolder,f"{name}_{0}.jpg")
      im2=os.path.join(imgfolder,f"{name}_{i+1}.jpg")
      result=verify(im1,im2,"Facenet")
      verification=result[0]
      distance=result[1]
      names=f"{name}_{i+1}"
      data = {'Prediction': verification, 'Distance': distance,"Names":names}
      df = df.append(data, ignore_index=True)

df.to_excel('/content/drive/MyDrive/case/case1_facenet.xlsx', index=False)



import os
import shutil

# Define the source folder(s)
source_folders = ['/tmp/LFWs_f1', '/tmp/LFWs_f2',"/tmp/LFWs_f3"]

pathMerge="/tmp/pathMerge"
if not os.path.exists(pathMerge):
  os.makedirs(pathMerge)

# Define the destination folder

destination_folder = '/tmp/pathMerge'

# Traverse through each folder and its subfolders
for folder in source_folders:
    for root, dirs, files in os.walk(folder):
        for file in files:
            # Move the file to the destination folder
            shutil.move(os.path.join(root, file), destination_folder)
        for dir in dirs:
            # Move the subfolder to the destination folder
            shutil.move(os.path.join(root, dir), destination_folder)

from PIL import Image

sourcepath="/tmp/pathMerge"
destpath="/tmp/filteredImages"
if not os.path.exists(destpath):
  os.makedirs(destpath)

for name in os.listdir(sourcepath):
  imgfolder=os.path.join(sourcepath,name)
  img_files = os.listdir(imgfolder)

  dest_folder=os.path.join(destpath,name)
  if not os.path.exists(dest_folder):
    os.makedirs(dest_folder)
  for i in img_files:

    img_address=os.path.join(imgfolder,i)
    dest_img_address=os.path.join(dest_folder,i)


    im = Image.open(img_address)
    flipped_image = im.transpose(Image.FLIP_LEFT_RIGHT)
    flipped_image.save(dest_img_address)

"""VGG-CASE2"""

import os
import pandas as pd
import csv
folderpath="/tmp/filteredImages"
df = pd.DataFrame(columns=['Prediction', 'Distance',"Names"])
for name in os.listdir(folderpath):
  imgfolder=os.path.join(folderpath,name)
  img_files = os.listdir(imgfolder)
  for i in range(0,(len(os.listdir(imgfolder))-1)):
      im1=os.path.join(imgfolder,f"{name}_{0}.jpg")
      im2=os.path.join(imgfolder,f"{name}_{i+1}.jpg")
      result=verify(im1,im2,"VGG-Face")
      verification=result[0]
      distance=result[1]
      names=f"{name}_{i+1}"
      data = {'Prediction': verification, 'Distance': distance,"Names":names}
      df = df.append(data, ignore_index=True)

df.to_excel('/content/drive/MyDrive/case/case2_vgg.xlsx', index=False)

import os
import pandas as pd
import csv
folderpath="/tmp/filteredImages"
df = pd.DataFrame(columns=['Prediction', 'Distance',"Names"])
for name in os.listdir(folderpath):
  imgfolder=os.path.join(folderpath,name)
  img_files = os.listdir(imgfolder)
  for i in range(0,(len(os.listdir(imgfolder))-1)):
      im1=os.path.join(imgfolder,f"{name}_{0}.jpg")
      im2=os.path.join(imgfolder,f"{name}_{i+1}.jpg")
      result=verify(im1,im2,"ArcFace")
      verification=result[0]
      distance=result[1]
      names=f"{name}_{i+1}"
      data = {'Prediction': verification, 'Distance': distance,"Names":names}
      df = df.append(data, ignore_index=True)

df.to_excel('/content/drive/MyDrive/case/case2_arg.xlsx', index=False)

import os
import pandas as pd
import csv
folderpath="/tmp/filteredImages"
df = pd.DataFrame(columns=['Prediction', 'Distance',"Names"])
for name in os.listdir(folderpath):
  imgfolder=os.path.join(folderpath,name)
  img_files = os.listdir(imgfolder)
  for i in range(0,(len(os.listdir(imgfolder))-1)):
      im1=os.path.join(imgfolder,f"{name}_{0}.jpg")
      im2=os.path.join(imgfolder,f"{name}_{i+1}.jpg")
      result=verify(im1,im2,"Facenet")
      verification=result[0]
      distance=result[1]
      names=f"{name}_{i+1}"
      data = {'Prediction': verification, 'Distance': distance,"Names":names}
      df = df.append(data, ignore_index=True)

df.to_excel('/content/drive/MyDrive/case/case2_facenet.xlsx', index=False)

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


dataframe1=pd.read_excel('/content/drive/MyDrive/case/case1_vgg.xlsx')
column_data1 = dataframe1.iloc[:, 1]

dataframe2=pd.read_excel('/content/drive/MyDrive/case/case2_vgg.xlsx')
column_data2 = dataframe2.iloc[:, 1]



dataframe3=pd.read_excel('/content/drive/MyDrive/case/case1_facenet.xlsx')
column_data3 = dataframe3.iloc[:, 1]
dataframe4=pd.read_excel('/content/drive/MyDrive/case/case2_facenet.xlsx')
column_data4 = dataframe4.iloc[:, 1]



dataframe5=pd.read_excel('/content/drive/MyDrive/case/case1_arg.xlsx')
column_data5 = dataframe5.iloc[:, 1]
dataframe6=pd.read_excel('/content/drive/MyDrive/case/case2_arg.xlsx')
column_data6 = dataframe6.iloc[:, 1]


# Create a list of the column data
column_data_list = [column_data1, column_data2,column_data3,column_data4,column_data5,column_data6]

fig = plt.figure(figsize =(9, 8))
plt.boxplot(column_data_list)


# Set labels and title
plt.xlabel("Vgg/unfiltered  Vgg/filtered  Facenet/unfiltered  Facenet/filtered  Arcface/unfiltered  Arcface/filtered")
plt.ylabel("Distance Values")
plt.title('Boxplot of Each Cases ')
plt.savefig('my_graph.png')
# show plot
plt.show()



VGG_tf=0
VGG_tt=0
VGG_ff=0
VGG_ft=0
for value1, value2 in zip(dataframe1['Prediction'], dataframe2['Prediction']):

    if value1 == value2:
         if(value1==1):
          VGG_tt+=1
         else:
          VGG_ff+=1
    else:
         if(value1==1):
          VGG_tf+=1
         else:
          VGG_ft+=1


print(f"When filtreded and unfiltered images shows true {VGG_tt}")
print(f"When filtreded and unfiltered images shows false {VGG_ff}")
print(f"When unfiltered show true but filtered shows false {VGG_tf}")
print(f"When unfiltered show false but filtered shows true {VGG_ft}")
print(VGG_tt+VGG_tf+VGG_ft+VGG_ff)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix


# Create the confusion matrix
cm = confusion_matrix(dataframe1['Prediction'], dataframe2['Prediction'])

# Define the labels for the confusion matrix
labels = ['Negative', 'Positive']

# Plot the confusion matrix
plt.figure(figsize=(6, 4))
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('VGG Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(labels))
plt.xticks(tick_marks, labels)
plt.yticks(tick_marks, labels)

# Add labels to each cell
thresh = cm.max() / 2
for i, j in np.ndindex(cm.shape):
    plt.text(j, i, format(cm[i, j], 'd'), horizontalalignment="center",
             color="white" if cm[i, j] > thresh else "black")

# Add axis labels
plt.xlabel('Predicted Label')
plt.ylabel('Actual Label')
plt.savefig('vgg_confusion.png')
plt.tight_layout()
plt.show()





FACE_tf=0
FACE_tt=0
FACE_ff=0
FACE_ft=0

for value1, value2 in zip(dataframe3['Prediction'], dataframe4['Prediction']):
    if value1 == value2:
         if(value1==1):
          FACE_tt+=1
         else:
          FACE_ff+=1
    else:
         if(value1==1):
          FACE_tf+=1
         else:
          FACE_ft+=1

print(f"When filtreded and unfiltered images shows true {FACE_tt}")
print(f"When filtreded and unfiltered images shows false {FACE_ff}")
print(f"When unfiltered show true but filtered shows false {FACE_tf}")
print(f"When unfiltered show false but filtered shows true {FACE_ft}")
print(FACE_tt+FACE_tf+FACE_ft+FACE_ff)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

# Create the confusion matrix
cm = confusion_matrix(dataframe3['Prediction'], dataframe4['Prediction'])

# Define the labels for the confusion matrix
labels = ['Negative', 'Positive']

# Plot the confusion matrix
plt.figure(figsize=(6, 4))
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('FACENET Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(labels))
plt.xticks(tick_marks, labels)
plt.yticks(tick_marks, labels)

# Add labels to each cell
thresh = cm.max() / 2
for i, j in np.ndindex(cm.shape):
    plt.text(j, i, format(cm[i, j], 'd'), horizontalalignment="center",
             color="white" if cm[i, j] > thresh else "black")

# Add axis labels
plt.xlabel('Predicted Label')
plt.ylabel('Actual Label')
plt.savefig('facenet_confusion.png')
plt.tight_layout()
plt.show()

ARG_tf=0
ARG_tt=0
ARG_ff=0
ARG_ft=0
for value1, value2 in zip(dataframe5['Prediction'], dataframe6['Prediction']):
    if value1 == value2:
         if(value1==1):
          ARG_tt+=1
         else:
          ARG_ff+=1
    else:
         if(value1==1):
          ARG_tf+=1
         else:
          ARG_ft+=1



print(f"When filtreded and unfiltered images shows true {ARG_tt}")
print(f"When filtreded and unfiltered images shows false {ARG_ff}")
print(f"When unfiltered show true but filtered shows false {ARG_tf}")
print(f"When unfiltered show false but filtered shows true {ARG_ft}")
print(ARG_tt+ARG_tf+ARG_ft+ARG_ff)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix



# Create the confusion matrix
cm = confusion_matrix(dataframe5['Prediction'], dataframe6['Prediction'])

# Define the labels for the confusion matrix
labels = ['Negative', 'Positive']

# Plot the confusion matrix
plt.figure(figsize=(6, 4))
plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
plt.title('ARCFACE Confusion Matrix')
plt.colorbar()
tick_marks = np.arange(len(labels))
plt.xticks(tick_marks, labels)
plt.yticks(tick_marks, labels)

# Add labels to each cell
thresh = cm.max() / 2
for i, j in np.ndindex(cm.shape):
    plt.text(j, i, format(cm[i, j], 'd'), horizontalalignment="center",
             color="white" if cm[i, j] > thresh else "black")

# Add axis labels
plt.xlabel('Predicted Label')
plt.ylabel('Actual Label')
plt.savefig('arc_confusion.png')
plt.tight_layout()
plt.show()



#filter1
unfilteredfirstVgg=0
unfilteredfirstFace=0
unfilteredfirstArc=0

for value in dataframe1["Prediction"].head(2130):

  if(value==1):
    unfilteredfirstVgg+=1

for value in dataframe3["Prediction"].head(2130):

  if(value==1):
    unfilteredfirstFace+=1

for value in dataframe5["Prediction"].head(2130):

  if(value==1):
    unfilteredfirstArc+=1
print(f"case1 vgg for first filter{unfilteredfirstVgg} ")
print(f"case1 facefor first filter {unfilteredfirstFace} ")
print(f"case1 arc for first filter{unfilteredfirstArc} ")


filteredfirstVgg=0
filteredfirstFace=0
filteredfirstArc=0

for value in dataframe2["Prediction"].head(2130):

  if(value==1):
    filteredfirstVgg+=1

for value in dataframe4["Prediction"].head(2130):

  if(value==1):
    filteredfirstFace+=1

for value in dataframe6["Prediction"].head(2130):

  if(value==1):
    filteredfirstArc+=1

print(f"filtered vgg for first filter {filteredfirstVgg} ")
print(f"filtered face for first filter {filteredfirstFace} ")
print(f"filtered arc  for first filter {filteredfirstArc} ")

#filter2
unfilteredsecondVgg=0
unfilteredsecondFace=0
unfilteredsecondArc=0

for value in dataframe1.loc[2130:3164, 'Prediction']:

  if(value==1):
    unfilteredsecondVgg+=1

for value in dataframe3.loc[2130:3164, 'Prediction']:

  if(value==1):
    unfilteredsecondFace+=1

for value in dataframe5.loc[2130:3164, 'Prediction']:

  if(value==1):
    unfilteredsecondArc+=1

print(f"case2 vgg for second filter{unfilteredsecondVgg} ")
print(f"case2 facefor second filter {unfilteredsecondFace} ")
print(f"case2 arc for second filter{unfilteredsecondArc} ")

filteredsecondVgg=0
filteredsecondFace=0
filteredsecondArc=0


for value in dataframe2.loc[2130:3164, 'Prediction']:

  if(value==1):
    filteredsecondVgg+=1

for value in dataframe4.loc[2130:3164, 'Prediction']:

  if(value==1):
    filteredsecondFace+=1

for value in dataframe6.loc[2130:3164, 'Prediction']:

  if(value==1):
    filteredsecondArc+=1

print(f"filtered vgg for second filter {filteredsecondVgg} ")
print(f"filtered face for second filter {filteredsecondFace} ")
print(f"filtered arc  for second filter {filteredsecondArc} ")

#filter3
unfilteredthirdVgg=0
unfilteredthirddFace=0
unfilteredthirdArc=0

for value in dataframe1.loc[3165:, 'Prediction']:

  if(value==1):
    unfilteredthirdVgg+=1

for value in dataframe3.loc[3165:, 'Prediction']:

  if(value==1):
    unfilteredthirddFace+=1

for value in dataframe5.loc[3165:, 'Prediction']:

  if(value==1):
    unfilteredthirdArc+=1

print(f"case3 vgg for second filter{unfilteredthirdVgg} ")
print(f"case3 facefor second filter {unfilteredthirddFace} ")
print(f"case3 arc for second filter{unfilteredthirdArc} ")

filteredthirdVgg=0
filteredthirdFace=0
filteredthirdArc=0


for value in dataframe2.loc[3165:, 'Prediction']:

  if(value==1):
    filteredthirdVgg+=1

for value in dataframe4.loc[3165:, 'Prediction']:

  if(value==1):
    filteredthirdFace+=1

for value in dataframe6.loc[3165:, 'Prediction']:

  if(value==1):
    filteredthirdArc+=1

print(f"filtered vgg for third filter {filteredthirdVgg} ")
print(f"filtered face for third filter {filteredthirdFace} ")
print(f"filtered arc  for third filter {filteredthirdArc} ")









































